package chapter6;

import java.math.BigInteger;
import java.util.Scanner;

public class Problem10247 {
	public static Scanner sc = new Scanner(System.in);
	public static BigInteger[][] soln = buildLUT();
	
	public static BigInteger factorial(int n) {
		BigInteger total = BigInteger.ONE;
		
		for (int i = 1; i <= n; ++i) {
			total = total.multiply(BigInteger.valueOf(i));
		}
		
		return total;
	}
	
	public static int countNodes(int k, int d) {
		if (d == 0 || k == 1) {
			return d + 1;
		}
		
		return (int) ((Math.pow(k, d + 1) - 1) / (k - 1)); // k^(d+1) / (k-1)
	}
	
	public static BigInteger[][] buildLUT() {
		BigInteger[][] soln = new BigInteger[22][22];
		soln[1][1] = new BigInteger("1");
		soln[1][2] = new BigInteger("1");
		soln[1][3] = new BigInteger("1");
		soln[1][4] = new BigInteger("1");
		soln[1][5] = new BigInteger("1");
		soln[1][6] = new BigInteger("1");
		soln[1][7] = new BigInteger("1");
		soln[1][8] = new BigInteger("1");
		soln[1][9] = new BigInteger("1");
		soln[1][10] = new BigInteger("1");
		soln[1][11] = new BigInteger("1");
		soln[1][12] = new BigInteger("1");
		soln[1][13] = new BigInteger("1");
		soln[1][14] = new BigInteger("1");
		soln[1][15] = new BigInteger("1");
		soln[1][16] = new BigInteger("1");
		soln[1][17] = new BigInteger("1");
		soln[1][18] = new BigInteger("1");
		soln[1][19] = new BigInteger("1");
		soln[1][20] = new BigInteger("1");
		soln[1][21] = new BigInteger("1");
		soln[2][1] = new BigInteger("2");
		soln[2][2] = new BigInteger("80");
		soln[2][3] = new BigInteger("21964800");
		soln[2][4] = new BigInteger("74836825861835980800000");
		soln[2][5] = new BigInteger("2606654998899867556195703676289609067340669424836280320000000000");
		soln[2][6] = new BigInteger("41005268973580817988588059080490296081534693390328550541844993678551506443266442152331921904636356310025006637554424347301745609297517294387200000000000000000000000");
		soln[2][7] = new BigInteger("2434411425898660167340134123995914965137209025246851730007017475190131421700516106290558434146618842384265101269365259152848225549737897840373988735034806508335402165944759071396448526252128249278116374587947952600937789575140974403104763945296840800521371180694382505760761207883312755078096123341887910919189703007198863834969798535477183884320969934766080000000000000000000000000000000000000000000000");
		soln[2][8] = new BigInteger("701500246835753875418118814989661685269756956648515087968498916041110715761622518504715353862971596932804203903839893333939405366151283793803624582330410381804778281613216815768126220591602211268856094321471063067311978817717090318520071520509349242754989899391268311037576444047435856097909663884754003215094161387085222562064871392132331642902233472094870853690238846682356223549420523906868412240319573302836850674651432516898161813303265720348092986027420251133389126175517860963445467494008666030479494976445951680500871507881406967359047393513002003658675476104709027016465077547345579773447093640634293311593596045192205837019822412118393840822275289338543806844220672050467627638641456645304915962219565339865938729139939256081556564240791383973230009871336968771080798448726547027444474157396680322183454186201897334872065857455338025867579508396630265036800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[2][9] = new BigInteger("551848164177005175041742383475442488731466849611499638299870269259150042027421317747184146849567386290521730327419862433749115555051939640172212006393478231737772804229944695519587203580177220903228226117685812667197264634836828449482194606997388381339610897645976842933337736555657791136975795118443767037312178139960490435850536877406191340817875247108082075359862337483500763411304342106354603051099312295277378644358269477785225983691679379598593452200038902160802487230522929686438138388380022462764715241297732476076425165962197777748932400345818313315485475789225941782512532999834532908721844848139740929051043419064240662708556009606731081250990768667053739923930724054185351481361555640666669862706437953519917384381946077653282050592654687511116550258828456828415626294357141674895132141948316252132990217095582594118295016796685188571557007754485769074574786397242719469036816428767054157074334659806194761550999088281459745528677511589835292987851235696900411217982358093161738221782710382783996140946422181021469680432905493784863859999768541924680150165289059690857014357599342943652488808372217104954325918740844217862628249335141372224708859062066182144438921860892442667833499747821096804490844646749193557114701400242265277576789332499881699766264799122486690591669257426961232506158739980717673429102992657299181089063871947158012986047965395411436285265943084453369246150211861233703367349070329885609280547997267638162946329342384030826686156232187559856380045068976384246908917759222499994989601194634970690921438502530022561465464119661236305633745880298409755460317768895062144560427329213368694007776819476145519901502014955775467722782459676838912193093600312475310312942344680633604001561384286837034953984685450110891164219505278390579132134102916862435761029539141025149289131094996130848124086769732402713248854482086449162895595519281346977820573342421050465206036095577658783204638155918904314416859843794615860793983291829756102434721026989534243974014386227318739257042745799444174214982829466032537600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[2][10] = new BigInteger("43395481677793492582976150229527319481832931952928722465788466296864398133705117619875293080891149139865141350233652554968791072941931523539998272132210599726592738666739902358903206398902335237423709439708691999074538814368471919746921195592551068594508492636887149808896512061920090023574892801195456766952541251449677528149969040542534059142975555840833543520530897617558890575939778003218576174230590118940667770701766381945412969590420094595363145267215277680540060098912471967655263720054015867248711225425637021811850899186346570572130175243687940466078880728040947742415482999941551154785849497845372994352885496747249725359463130436168765654368026792261840454378333982369631616131768850976505000707897555963810477306293881098267144576210865573147775618459421133208399357517632935860979586441440299194569338489384195765402009015291200701587623680486774900083447381563272689384694507863023314078602857426771749237140009948136106406822585691220594042756274650089639401179695540128794985032457232318178090429882166058495167168878826322801114255519442941831620135121439649859927067349329009807437422378514366443024752990207306803165105956616465497373676426036984293771821810347796407402844251652679407470248973183975103327250643727071040613051019853117065699160469372979669512311454459980027370830701943539554253809098335052375093384448868150344532656834219294496474752306942492740941995107586755375339367829358949419236468030243291000509213159097876967543558901515551834524167617765255876155390582280954703402326313856564108866582741560748728643905136422818754602314932100629020799937079751304353699674180087819429931121556331754160198561944093898676095235074221399605516684660692475054670100364325213333233962283179161081431185343951745346919126407285664978539604084585401058039234495874801908319080765762582587186999277673944148980676851473602338104384545323910307245862519354455807697581330110824109795504911291259653073965702672357887353639215893646295031806485283796124033701940495796213688050626872173650699671927140697011042940375909879884292393615544819213804252638434606776297888142794451018817030008563992824661451541951878179616852123654422896907450260606906086980792779819016505835553463452994822450992408513057749766293782022707884189120535441785925182678638906095332841512912594396226746645010199599584350091125269276146016807817781990218726481394242994793006962756338062218790986669160954537444098551800583966836365385338042397024121422348997602561343135100579238078634994878478632386479941787808012477731182065246560761642835158510437958800461270609454630427795041186387062799944862881551255272359876650035846285265043916518143080378875436318917040627361652602287059069386857087000635709898770405145778674967210667106195984482974053475507507062059739061688337903631759851904400040792180652036568953450007754955005798068758761063945291826476007950012642072390719467853203574575191426589951798678040171750498724929568438236699333953602198712458146071026103130082580904469580346532459240257330476731928142317037571678006588842269130865231392591300727417259880699709292748931938468314596562929541125849862469652202309901682285864567815766081625261511031208304943218521550329043966692429623751734721546335529343175797353944191754581493666595084075933168144176774302801920265255799084662244559399420898330051327302051882869871141759928162684768920284172197317562036488542412260816281984327110786296845605805715770857791500335112105235141431239552868824615839718953287557534005828616833085138500850552930616308309142936061246554641589214669821338628472087731571560410530488056343297493005435477214071932831391615228717056400926140440145448547457301422847571811595065203581585547142003286736675018300695818435182520279286981692328120915276479363125838298818791548888458125808667808828051755429570907891469973699273215580246363084188229299549245596081530767209205626401179439997684247160623504184893226651975997324686189010475216915129079804117425862376136029338216185444529725693036348193402603149232121486006659222592033619436052451429081209768734690402718770678018987679630327849110731499315102500521587593862240821543746953066589962618789829315115150942925741067873057186366891153317760870258201709329118485542376826780296468386345130808948982109617083304126668692047334636038612239633747276983238479257259768993214631434032810367973759499603119867320572199598009185738441240683325602532015608797275262391527893008386266882676723543497954375445487999620359658320479557625138666863461273073040093338095781255661417565017087240907890528387319352915928231673925383081748012984260026956423697050511733756738707126567493294831379956332147697474487450458861348252779806720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[3][1] = new BigInteger("6");
		soln[3][2] = new BigInteger("7484400");
		soln[3][3] = new BigInteger("35417271278873496315860673177600000000");
		soln[3][4] = new BigInteger("547146892012713961664644185643703097313306041078602028191203363023541251709015111698307408797840385178119946966391820458049986500071192547819520000000000000000000000000");
		soln[3][5] = new BigInteger("58361314001262035923951371535851482325730388972602331484915123704018341172194132762048493612263794229316474184936030663276495852320754219341710137527081349354611978276450260796811732559240150194044226906683201822677406203193630999338270288677281407499195305985918789330905621710753686109029296908342175944943953427898932102000929828500873823264373290258652135519269050035912555215184891595362093448979878285208300847920870458856326970228684197816408894150214630674320564386168050370199043185242456953134207295040607650588375052373061838234825127179757388512194661014043386852372890962990758625280000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[3][6] = new BigInteger("15624264289858381167166638476020539199936877066827449206917758744958199546630264802237721967380806696892330756741858402075550762206212940253683179209630381242515557503674265920419045824985517469070276338393165424213705914533762293419108101769810714012749838397760438014193832135261807625714333233234513722648113071641811315718401462251331435493367916815791611410723539546115693154449404921371104907052917235304851770440873161061401493323164247780845903608589631273520040636528697768615106352751345782869519355161703316498183049780173942882987769153138765246082189705615808655057823757335765929140542071307695335833920543237254675056946500430178857831621311756371492777361848293540537591350411812387029074332854392836704187070918125490393508246302666378797719593633682454651703335380338567544717919434226536732483924569391953454032342740090373684849929837531961058218785938451417056848709155226680101322129496886994243792189658442546672390003979313721506213763300241221341380254853940226810293696177640419098445545704205177764021694338973835892632481020230246682253105279931577832379600389989429245582681964220073137731558588637349675794810666849653911736834613625096709110604204475252077963928940342371835265118317930171907639085896925032111285645626196472528336639093828707031515034885183980776288259578966766309131225233669850504034902997936603688874070907087428485524235623732559160365843830362657453801508175245563207681883921927790049907930633891636050809938313008763785384039203657397520832937013360259293706230922648562608307881020545340389250289120538091819770767223292541030618563015964592611696023666111356699526001186452242187574866964787444226498773231062980111128134643418654713838064098173633234294630376275206039318390073921042785559397629146256334167884851990669161232689194767693665448569070644104927323508960102961763524008532256497858648259236438233936931753046144817219284603814559072877346652498804887350322211569952780283022382474889025308219214228954816030771980215088316014439191859037803833085881863892080993668857008697559926230081114466642932713136066777957789067879274175813935010256359253189963948489831195073302019267715965340275989077758221079346209137511656717266813044585789704176849463369658532666766557639017940454230390687757321966455677648554868183631034056704000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[3][7] = new BigInteger("");
		soln[4][1] = new BigInteger("24");
		soln[4][2] = new BigInteger("3892643213082624");
		soln[4][3] = new BigInteger("111682910648790880191932304125273051912737833379692080556877378036032395569918889972602048909907816771223552000");
		soln[4][4] = new BigInteger("126002478694313331522934784315075035204419422123743831088739397918071970578534120792265174267662968816665985072986350032680041952388930581681236745288692213701332987869334555853799742118813741328067217941896889137340191046222435436190571294005662567751881931674187595011884573538361918450162098698787035443077218050614725611986526149310525305850102353583011691793811298326026160662621654257730941576354721156040229380151095630710994246186162851462182316445815982275751825529144404024078757960957123002207425402104370076126882795498004586397644160586184269460455125239887387649139565707651239614190689453392613705507277327302656000000000000000");
		soln[4][5] = new BigInteger("823332299411754795925132204502695458463832817775975440865321975167936453951235734015014616613449620740713939182041883759025986920373965767514222325920908987411940210831316678299368021202875040428730031976774046983531008427722916411331919510724773759380096741279835134057131573865701518431005162199875219485435742376635074395446047509265994586127687097514686564009088786281574233026174069981196779740564187595655418705302755363849458416961038387428062592726507140832007465888807154099582946562965851795805403688476857849424332962214882830336132898296901081306595343013724080907257217039929917558256973736430049607318010146721200214607385354714710033720915939620856875023987859642312925432023778539893741977562315853237358988644262837860185367074823769650690383766018006670850940949526680407668012445527092902354754626382516487237844167996245292865472314619732890539797639556974902176454310829844839448561825037561333240792932905040000636665706436479221276372080939283774763750002993370536672557592633085704903566618380584072103425482345229369898678385952060399125002241243238932246102303400733180247893209540087818036369652678111392815122386132567193951533690230600885096941855601753119007234173391289086085206081283141228535426764500988502746456968905454635918379713503795179214582315769987368565626439184131701652078122613187408743830585727154639121637355574942041221935316016061545916581002372665941405642451926332613124581226104727813574485019594476556352770449692122147271124819689590273692013537888448108211028267843053457529191638640203982541231459146330443700091528086813810213288326750611556370304279857854926608558956269493995132023833713432410590163301070274476935924873302612899547039884434224394143115647205926754314466852387565182580741430907771209850367333717095874323787518626511813651049370901355458140698006342608192566769613697444666740800341289036404386743111708317371784249456380750781292319634413091406366182267269591077299944779883838859201558550458733273898465793662330218885593567737753738603438508246796734425053196224056565363069071582814225012922599916225485288305398882426131910876205601830995536204225248088578180463452816900778242719429028923826834108814890729869374590780611722229592596282817149189185720849340998078599992070315992416366952907159754932313292470716286036484223260168674535898942449122269458507787280668893139549242249017696972400120518200904851889420578546466059945726057585851756335673564866477282954919446789734107202855022634505692601002335495805996882929937633084189749483437477736423235049093932903357122482364622083668877523450440108349383310892052205633578863529860175906409933983234276140977380994419607536840693277006196028489206723370532878994123918812967120819901143005523934712668226086793857995581380815519408954183722430381757976401718842286818129290142967769840464584256180919693607431855356126285731304155387525499463125293474442535653123728974144627177043749716804900424230765811103164600707814164626138602404807405090303027650835356705064735382755690778268044464919917321043696123440402612083778903444305092777168142895386957960688153703189121238250803872045323684952540492285999331137296554847216220158712161505150947735241419398853692734026480545866588143041448324780195450071066967351700351428657546526174427276532214567310171665427725580287082496000000000000000000000000000000000000000000000000000000000000000000");
		soln[5][1] = new BigInteger("120");
		soln[5][2] = new BigInteger("34111736086958726676480000000");
		soln[5][3] = new BigInteger("5883937720594158310346318279995441420136651157038456422426741369195154553196178926207720498703908961856368670546563264379519641988035613365433813128012461508842268322518743561341012856467185872502947467126374400000000000000000000000000000000000000");
		soln[5][4] = new BigInteger("2574578943243842990688477824054505946139692101494333340284031300973098266683062996213179748610326429341878643609894156532172682578528301427608128929035331896911285089966070645796090800943376218028570558075844884454537552370318212998548749276488835748810108909197548947998148394851687329006419054694825757066050849166220766226221433897115996456299187446049443095583839453116059305461245705945545910863176357749422046339418036263001803170188676205892844185794190020700626417150607091676151517908358907864850625419135144200512892484689522013441516135409262453899499719688505194307130470575643445222680733693140813397354570169649188296812166120879436162101803832209397408208509503576799619609183681572993020685349064024860262626720620533389407637336578249148742174210718525831220404372575213801451623169365144788021763768817146895479160376897401288403856144517807242593958199276550948389596173312715760047345171645572639353013124980970239188296960724616041607520918343157652358489409077596424345689112755673584209813031541543584948157182404431110206773761796193851651768930561275228738846117054899893375640844294697926001821037273894706897109827314588486480667178965422988375054693161873528178214124107974362831996165929047792333840855203579465173260283085762172120099585805612965352921974545818452966364472681991070864961156581903226156756612810488458117264566252360702775201380988331568561653688614930674679128957275993072955820963093617242778834180640378151489188061055690426566260233122001590098186145050096044437747653899095726536909353430131651523838222443153546129621565990502400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[6][1] = new BigInteger("720");
		soln[6][2] = new BigInteger("11942354952042770431904585727413846016000000000");
		soln[6][3] = new BigInteger("3393186235164103026559147034089031885833862700162401431094466910725815103355576409849458625111467673963171490166857221835098385096993916472686106994513579287124813186590948347828361561089066781839471285337327697532413160274492651868920958018558519594860131179616716079229468603140496044330581456960200355105409611451329806469942985349410667518150511859718736808929262155050122065629321268595555967855843344384000000000000000000000000000000000000000000000000000000000000000");
		soln[7][1] = new BigInteger("5040");
		soln[7][2] = new BigInteger("339030546095306135108015845996725535267113675537666539520000000000000");
		soln[7][3] = new BigInteger("459008612171193837379175885705646616469811010723886106029885385886318758724264346089182890387738914226187622773216840453787827596432869775253811869965557954243104618726475758484459807635055490815478481651355874528922523403873733130244367560859481375620301079868769283552722539583238135272835521240747282351398075336167855143197653695339472705674043106571626531515932185939249603550190519713081275909680281878034146978338709100091586806154099944838550004014649782982614800958763586673197129286227300995958423990765954412993636882171998994914905686237992062170189486126721025725020359267567249198930141386427221870048749437834176561027622397930536912508998255197023440816026121380785006129614379420113989979214970880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		soln[8][1] = new BigInteger("40320");
		soln[8][2] = new BigInteger("1422511563119664488766149467813696489002683660497563309963214502771962235804712960000000000000000");
		soln[9][1] = new BigInteger("362880");
		soln[9][2] = new BigInteger("1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000");
		soln[10][1] = new BigInteger("3628800");
		soln[10][2] = new BigInteger("612337410500466264247115608495827965249432754754846803596178994380513328550270550084208806969735527000221453969564832440571463528528225710899200000000000000000000000000");
		soln[11][1] = new BigInteger("39916800");
		soln[12][1] = new BigInteger("479001600");
		soln[13][1] = new BigInteger("6227020800");
		soln[14][1] = new BigInteger("87178291200");
		soln[15][1] = new BigInteger("1307674368000");
		soln[16][1] = new BigInteger("20922789888000");
		soln[17][1] = new BigInteger("355687428096000");
		soln[18][1] = new BigInteger("6402373705728000");
		soln[19][1] = new BigInteger("121645100408832000");
		soln[20][1] = new BigInteger("2432902008176640000");
		soln[21][1] = new BigInteger("51090942171709440000");
		return soln;
	}
	
	public static void outputLUT() {
		for (int k = 1; k <= 21; ++k) {
			soln[k][0] = BigInteger.ONE;
			for (int d = 1; d <= 21; ++d) {
				if (k * d <= 21) {
					BigInteger numerator = factorial(countNodes(k, d) - 1).multiply(soln[k][d-1].pow(k));
					BigInteger denominator = factorial(countNodes(k, d - 1)).pow(k);
					soln[k][d] = numerator.divide(denominator);
					System.out.println("soln["+k+"]" + "["+d+"] = new BigInteger(\"" + soln[k][d] + "\");");
				}
			}
		}
	}
	
	//Thanks to NickBarnes89 for helping to solve this problem!
	// Base case: f(k, 0) = 1
	// Total valid permutations of tree with smallest number on top: v = (n(k, d)-1)!
	// Fraction for a subtree that is valid: p = f(k, d-1) / n(k, d-1)! (note (depth - 1 number of nodes) versus previous line's (total nodes - 1) factorial)
	// Total valid trees: f(k, d) = v * p^k = (n(k, d)-1)! * (f(k, d-1)/(n(k, d-1))!)^k
	public static void main(String[] args) {
		while (sc.hasNext()) {
			int k = sc.nextInt();
			int d = sc.nextInt();
			System.out.println(soln[k][d]);
		}
	}
}